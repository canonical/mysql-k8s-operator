rule_files:
  - ../../src/prometheus_alert_rules/general_rules.yaml

evaluation_interval: 1m

tests:
  - name: MySQLDown fires after 5m of mysql_up=0
    interval: 1m
    input_series:
      - series: 'mysql_up{instance="db1"}'
        values: '1 1 1 1 0 0 0 0 1 1 1'
    alert_rule_test:
      - alertname: MySQLDown
        eval_time: 2m
        exp_alerts: []
      - alertname: MySQLDown
        eval_time: 5m
        exp_alerts:
          - exp_labels:
              instance: db1
              severity: critical
            exp_annotations:
              summary: MySQL instance db1 is down.
              description: |
                The MySQL instance is not reachable.
                Please check if the MySQL process is running and the network connectivity.
                LABELS = map[__name__:mysql_up instance:db1].

  - name: MySQLMetricsScrapeError fires at 4m when exporter scrape error > 0
    interval: 1m
    input_series:
      - series: 'mysql_exporter_last_scrape_error{instance="db1"}'
        values: '0 0 1 2 2 2 2 2 2'
    alert_rule_test:
      - alertname: MySQLMetricsScrapeError
        eval_time: 4m
        exp_alerts:
          - exp_labels:
              instance: db1
              severity: warning
            exp_annotations:
              summary: MySQL instance db1 has a metrics scrape error.
              description: |
                The MySQL Exporter encountered an error while scraping metrics.
                Check the MySQL Exporter logs for more details.
                LABELS = map[instance:db1].

  - name: MySQLTooManyConnections fires after 5m when >90% of max_connections
    interval: 1m
    input_series:
      - series: 'mysql_global_variables_max_connections{instance="db1"}'
        values: '100 100 100 100 100 100 100 100 100'
      - series: 'mysql_global_status_threads_connected{instance="db1"}'
        values: '50 60 70 80 95 95 95 70 60'
    alert_rule_test:
      - alertname: "MySQLTooManyConnections(>90%)"
        eval_time: 4m
        exp_alerts: []
      - alertname: "MySQLTooManyConnections(>90%)"
        eval_time: 6m
        exp_alerts:
          - exp_labels:
              instance: db1
              severity: warning
            exp_annotations:
              summary: MySQL instance db1 is using > 90% of `max_connections`.
              description: |
                Consider checking the client application responsible for generating those additional connections.
                LABELS = map[instance:db1].

  - name: MySQLHighThreadsRunning fires after 5m when >80% of max_connections
    interval: 1m
    input_series:
      - series: 'mysql_global_variables_max_connections{instance="db1"}'
        values: '100 100 100 100 100 100 100 100 100'
      - series: 'mysql_global_status_threads_running{instance="db1"}'
        values: '20 30 40 60 85 85 85 40 30'
    alert_rule_test:
      - alertname: MySQLHighThreadsRunning
        eval_time: 4m
        exp_alerts: []
      - alertname: MySQLHighThreadsRunning
        eval_time: 6m
        exp_alerts:
          - exp_labels:
              instance: db1
              severity: warning
            exp_annotations:
              summary: MySQL instance db1 is actively using > 80% of `max_connections`.
              description: |
                Consider reviewing the value of the `max-connections` config parameter or allocate more resources to your database server.
                LABELS = map[instance:db1].

  - name: MySQLHighPreparedStatementsUtilization fires after 5m when >80%
    interval: 1m
    input_series:
      - series: 'mysql_global_variables_max_prepared_stmt_count{instance="db1"}'
        values: '100 100 100 100 100 100 100 100 100'
      - series: 'mysql_global_status_prepared_stmt_count{instance="db1"}'
        values: '50 60 70 75 81 81 81 70 60'
    alert_rule_test:
      - alertname: "MySQLHighPreparedStatementsUtilization(>80%)"
        eval_time: 4m
        exp_alerts: []
      - alertname: "MySQLHighPreparedStatementsUtilization(>80%)"
        eval_time: 6m
        exp_alerts:
          - exp_labels:
              instance: db1
              severity: warning
            exp_annotations:
              summary: MySQL instance db1 is using > 80% of `max_prepared_stmt_count`.
              description: |
                Too many prepared statements might consume a lot of memory.
                LABELS = map[instance:db1].

  - name: MySQLSlowQueries fires at 4m when slow_queries increases
    interval: 1m
    input_series:
      - series: 'mysql_global_status_slow_queries{instance="db1"}'
        values: '10 10 11 12 13'
    alert_rule_test:
      - alertname: MySQLSlowQueries
        eval_time: 2m
        exp_alerts: []
      - alertname: MySQLSlowQueries
        eval_time: 4m
        exp_alerts:
          - exp_labels:
              instance: db1
              severity: info
            exp_annotations:
              summary: MySQL instance db1 has slow queries.
              description: |
                Consider optimizing the query by reviewing its execution plan, then rewrite the query and add any relevant indexes.
                LABELS = map[instance:db1].

  - name: MySQLInnoDBLogWaits fires at 16m when log waits keep growing
    interval: 1m
    input_series:
      - series: 'mysql_global_status_innodb_log_waits{instance="db1"}'
        values: '0 700 1400 2100 2800 3500 4200 4900 5600 6300 7000 7700 8400 9100 9800 10500 11200 11900 12600'
    alert_rule_test:
      - alertname: MySQLInnoDBLogWaits
        eval_time: 16m
        exp_alerts:
          - exp_labels:
              instance: db1
              severity: warning
            exp_annotations:
              summary: MySQL instance db1 has long InnoDB log waits.
              description: |
                MySQL InnoDB log writes might be stalling.
                Check I/O activity on your nodes to find the responsible process or query. Consider using iotop and the performance_schema.
                LABELS = map[instance:db1].

  - name: MySQLRestarted fires when uptime < 1m and clears by 5m
    interval: 1m
    input_series:
      - series: 'mysql_global_status_uptime{instance="db1"}'
        values: '10 20 30 40 120 180 240 300 360'
    alert_rule_test:
      - alertname: MySQLRestarted
        eval_time: 2m
        exp_alerts:
          - exp_labels:
              instance: db1
              severity: info
            exp_annotations:
              summary: MySQL instance db1 restarted.
              description: |
                MySQL restarted less than one minute ago.
                If the restart was unplanned or frequent, check Loki logs (e.g. `error.log`).
                LABELS = map[__name__:mysql_global_status_uptime instance:db1].
      - alertname: MySQLRestarted
        eval_time: 5m
        exp_alerts: []

  - name: MySQLConnectionErrors fire at 5m when connection_errors_total > 0
    interval: 1m
    input_series:
      - series: 'mysql_global_status_connection_errors_total{instance="db1"}'
        values: '0 0 0 0 0 12 12 12 12'
    alert_rule_test:
      - alertname: MySQLConnectionErrors
        eval_time: 5m
        exp_alerts:
          - exp_labels:
              instance: db1
              severity: warning
            exp_annotations:
              summary: MySQL instance db1 has connection errors.
              description: |
                Connection errors might indicate network issues, authentication problems, or resource limitations.
                Check the MySQL logs for more details.
                LABELS = map[instance:db1].
