# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.
name: Release tests

on:
  workflow_call:
    inputs:
      artifact-prefix:
        description: |
          Prefix for charm package GitHub artifact(s)
          
          Use canonical/data-platform-workflows build_charm.yaml to build the charm(s)
        required: true
        type: string

jobs:
  collect-release-tests:
    name: Collect release test spread jobs
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up environment
        run: |
          sudo snap install charmcraft --classic
          pipx install tox poetry
      - name: Collect spread jobs
        id: collect-jobs
        shell: python
        run: |
          import json
          import os
          import subprocess

          spread_jobs = (
              subprocess.run(
                  ["charmcraft", "test", "--list", "github-ci:tests/spread/release/"],
                  capture_output=True,
                  check=True,
                  text=True,
              )
              .stdout.strip()
              .split("\n")
          )
          jobs = []
          for job in spread_jobs:
              # Example `job`: "github-ci:ubuntu-24.04:tests/spread/release/test_charm.py:juju36"
              _, runner, task, variant = job.split(":")
              # Example: "test_charm.py"
              task = task.removeprefix("tests/spread/release/")
              if runner.endswith("-arm"):
                  architecture = "arm64"
              else:
                  architecture = "amd64"
              # Example: "test_charm.py:juju36 | amd64"
              name = f"{task}:{variant} | {architecture}"
              # ":" character not valid in GitHub Actions artifact
              name_in_artifact = f"{task}-{variant}-{architecture}"
              jobs.append({
                  "spread_job": job,
                  "name": name,
                  "name_in_artifact": name_in_artifact,
                  "runner": runner,
              })
          output = f"jobs={json.dumps(jobs)}"
          print(output)
          with open(os.environ["GITHUB_OUTPUT"], "a") as file:
              file.write(output)
      - name: Generate Allure default test results
        if: ${{ github.event_name == 'schedule' && github.run_attempt == '1' }}
        run: tox run -e integration -- tests/integration/release --allure-default-dir=allure-default-results
      - name: Upload Allure default results
        # Default test results in case the integration tests time out or runner set up fails
        # (So that Allure report will show "unknown"/"failed" test result, instead of omitting the test)
        if: ${{ github.event_name == 'schedule' && github.run_attempt == '1' }}
        uses: actions/upload-artifact@v4
        with:
          name: allure-default-results-release-test
          path: allure-default-results/
          if-no-files-found: error
    outputs:
      jobs: ${{ steps.collect-jobs.outputs.jobs }}

  release-test:
    strategy:
      fail-fast: false
      matrix:
        job: ${{ fromJSON(needs.collect-release-tests.outputs.jobs) }}
    name: ${{ matrix.job.name }}
    needs:
      - collect-release-tests
    runs-on: ${{ matrix.job.runner }}
    timeout-minutes: 226  # Sum of steps `timeout-minutes` + 5
    steps:
      - name: Free up disk space
        timeout-minutes: 10
        run: |
          printf '\nDisk usage before cleanup\n'
          df --human-readable
          # Based on https://github.com/actions/runner-images/issues/2840#issuecomment-790492173
          rm -r /opt/hostedtoolcache/
          printf '\nDisk usage after cleanup\n'
          df --human-readable
      - name: Checkout
        timeout-minutes: 3
        uses: actions/checkout@v5
      - name: Set up environment
        timeout-minutes: 5
        run: sudo snap install charmcraft --classic
      # TODO: remove when https://github.com/canonical/charmcraft/issues/2105 and
      # https://github.com/canonical/charmcraft/issues/2130 fixed
      - run: |
          sudo snap install go --classic
          go install github.com/snapcore/spread/cmd/spread@latest
      - name: Download packed charm(s)
        timeout-minutes: 5
        uses: actions/download-artifact@v5
        with:
          pattern: ${{ inputs.artifact-prefix }}-*
          merge-multiple: true
      - name: Run spread job
        timeout-minutes: 180
        id: spread
        # TODO: replace with `charmcraft test` when
        # https://github.com/canonical/charmcraft/issues/2105 and
        # https://github.com/canonical/charmcraft/issues/2130 fixed
        run: ~/go/bin/spread -vv -artifacts=artifacts '${{ matrix.job.spread_job }}'
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          GCP_ACCESS_KEY: ${{ secrets.GCP_ACCESS_KEY }}
          GCP_SECRET_KEY: ${{ secrets.GCP_SECRET_KEY }}
          UBUNTU_PRO_TOKEN: ${{ secrets.UBUNTU_PRO_TOKEN }}
          LANDSCAPE_ACCOUNT_NAME: ${{ secrets.LANDSCAPE_ACCOUNT_NAME }}
          LANDSCAPE_REGISTRATION_KEY: ${{ secrets.LANDSCAPE_REGISTRATION_KEY }}
      - name: Upload Allure results
        timeout-minutes: 3
        # Only upload results from one spread system & one spread variant
        # Allure can only process one result per pytest test ID. If parameterization is done via
        # spread instead of pytest, there will be overlapping pytest test IDs.
        if: ${{ (success() || (failure() && steps.spread.outcome == 'failure')) && startsWith(matrix.job.spread_job, 'github-ci:ubuntu-24.04:') && endsWith(matrix.job.spread_job, ':juju36') && github.event_name == 'schedule' && github.run_attempt == '1' }}
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-release-test-${{ matrix.job.name_in_artifact }}
          path: artifacts/${{ matrix.job.spread_job }}/allure-results/
          if-no-files-found: error
      - timeout-minutes: 1
        if: ${{ success() || (failure() && steps.spread.outcome == 'failure') }}
        run: snap list
      - name: lxc image list
        timeout-minutes: 1
        if: ${{ success() || (failure() && steps.spread.outcome == 'failure') }}
        # sudo needed since spread runs scripts as root
        run: sudo lxc image list
      - name: Select model
        timeout-minutes: 1
        # `!contains(matrix.job.spread_job, 'juju29')` workaround for juju 2 error:
        # "ERROR cannot acquire lock file to read controller concierge-microk8s: unable to open
        # /tmp/juju-store-lock-3635383939333230: permission denied"
        # Unable to workaround error with `sudo rm /tmp/juju-*`
        if: ${{ !contains(matrix.job.spread_job, 'juju29') && (success() || (failure() && steps.spread.outcome == 'failure')) }}
        id: juju-switch
        run: |
          # sudo needed since spread runs scripts as root
          # "testing" is default model created by concierge
          sudo juju switch testing
          mkdir ~/logs/
      - name: juju status
        timeout-minutes: 1
        if: ${{ !contains(matrix.job.spread_job, 'juju29') && (success() || (failure() && steps.spread.outcome == 'failure')) }}
        run: sudo juju status --color --relations | tee ~/logs/juju-status.txt
      - name: juju debug-log
        timeout-minutes: 3
        if: ${{ !contains(matrix.job.spread_job, 'juju29') && (success() || (failure() && steps.spread.outcome == 'failure')) }}
        run: sudo juju debug-log --color --replay --no-tail | tee ~/logs/juju-debug-log.txt
      - name: jhack tail
        timeout-minutes: 3
        if: ${{ !contains(matrix.job.spread_job, 'juju29') && (success() || (failure() && steps.spread.outcome == 'failure')) }}
        run: sudo jhack tail --printer raw --replay --no-watch | tee ~/logs/jhack-tail.txt
      - name: Upload logs
        timeout-minutes: 5
        if: ${{ !contains(matrix.job.spread_job, 'juju29') && (success() || (failure() && steps.spread.outcome == 'failure')) }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-release-test-${{ matrix.job.name_in_artifact }}
          path: ~/logs/
          if-no-files-found: error
      - name: Disk usage
        timeout-minutes: 1
        if: ${{ success() || (failure() && steps.spread.outcome == 'failure') }}
        run: df --human-readable
