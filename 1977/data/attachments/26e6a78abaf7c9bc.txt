[32mINFO    [0m integration.high_availability.conftest:conftest.py:26 Clearing continuous writes
[32mINFO    [0m integration.high_availability.conftest:conftest.py:28 Starting continuous writes
[32mINFO    [0m integration.high_availability.test_upgrade:test_upgrade.py:145 Get leader unit
[32mINFO    [0m integration.high_availability.test_upgrade:test_upgrade.py:149 Run pre-upgrade-check action
[32mINFO    [0m integration.high_availability.test_upgrade:test_upgrade.py:162 Inject dependency fault
[32mINFO    [0m integration.high_availability.test_upgrade:test_upgrade.py:167 Refresh the charm
[32mINFO    [0m integration.high_availability.test_upgrade:test_upgrade.py:170 Get first upgrading unit
[32mINFO    [0m integration.high_availability.test_upgrade:test_upgrade.py:174 Wait for upgrade to fail on first upgrading unit
[32mINFO    [0m integration.high_availability.test_upgrade:test_upgrade.py:180 Ensure continuous_writes while in failure state on remaining units
[32mINFO    [0m integration.high_availability.test_upgrade:test_upgrade.py:184 Re-run pre-upgrade-check action
[32mINFO    [0m integration.high_availability.test_upgrade:test_upgrade.py:187 Re-refresh the charm
[32mINFO    [0m integration.high_availability.test_upgrade:test_upgrade.py:190 Wait for upgrade to complete on first upgrading unit
[32mINFO    [0m integration.high_availability.test_upgrade:test_upgrade.py:195 Resume upgrade
[32mINFO    [0m httpx:_client.py:1026 HTTP Request: GET https://10.1.0.87:16443/apis/apps/v1/namespaces/test/statefulsets/mysql-k8s "HTTP/1.1 200 OK"
[32mINFO    [0m httpx:_client.py:1026 HTTP Request: GET https://10.1.0.87:16443/apis/apps/v1/namespaces/test/statefulsets/mysql-k8s "HTTP/1.1 200 OK"
[32mINFO    [0m httpx:_client.py:1026 HTTP Request: GET https://10.1.0.87:16443/apis/apps/v1/namespaces/test/statefulsets/mysql-k8s "HTTP/1.1 200 OK"
[32mINFO    [0m integration.high_availability.test_upgrade:test_upgrade.py:208 Wait for application to recover
[32mINFO    [0m integration.high_availability.test_upgrade:test_upgrade.py:214 Ensure continuous_writes after rollback procedure
[32mINFO    [0m integration.high_availability.conftest:conftest.py:33 Clearing continuous writes
[32mINFO    [0m pytest_operator.plugin:plugin.py:790 Model status:

Model  Controller          Cloud/Region        Version  SLA          Timestamp
test   microk8s-localhost  microk8s/localhost  3.4.3    unsupported  01:38:50Z

App             Version                  Status  Scale  Charm           Channel      Rev  Address         Exposed  Message
mysql-k8s       8.0.36-0ubuntu0.22.04.1  active      3  mysql-k8s                      2  10.152.183.188  no       
mysql-test-app  0.0.2                    active      1  mysql-test-app  latest/edge   37  10.152.183.103  no       

Unit               Workload  Agent  Address       Ports  Message
mysql-k8s/0        active    idle   10.1.206.213         
mysql-k8s/1*       active    idle   10.1.206.212         
mysql-k8s/2        active    idle   10.1.206.211         Primary
mysql-test-app/0*  active    idle   10.1.206.203         

[32mINFO    [0m pytest_operator.plugin:plugin.py:796 Juju error logs:

unit-mysql-k8s-2: 01:35:43 ERROR unit.mysql-k8s/2.juju-log charms.data_platform_libs.v0.upgrade.VersionError - {'message': 'Versions incompatible, charm 1 can not be upgraded to 999.999.999', 'cause': 'Upgrades only supported for specific versions, charm versions satisfying requirement >1', 'resolution': ''}
unit-mysql-k8s-2: 01:35:43 CRITICAL unit.mysql-k8s/2.juju-log Upgrade failed, follow the instructions below to rollback:
  1 - Run `juju run mysql-k8s/leader pre-upgrade-check` to configure rollback
  2 - Run `juju refresh --revision <previous-revision> mysql-k8s` to initiate the rollback
  3 - Run `juju run mysql-k8s/leader resume-upgrade` to resume the rollback

[32mINFO    [0m pytest_operator.plugin:plugin.py:862 Forgetting main...