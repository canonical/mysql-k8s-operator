[32mINFO    [0m integration.high_availability.conftest:conftest.py:26 Clearing continuous writes
[32mINFO    [0m integration.high_availability.conftest:conftest.py:28 Starting continuous writes
[32mINFO    [0m integration.high_availability.high_availability_helpers:high_availability_helpers.py:249 Deploying Chaos Mesh
[32mINFO    [0m integration.high_availability.high_availability_helpers:high_availability_helpers.py:259 Ensure chaos mesh is ready
[32mINFO    [0m integration.high_availability.high_availability_helpers:high_availability_helpers.py:296 Deploying mysql-k8s and scaling to 3 units
[32mINFO    [0m integration.high_availability.high_availability_helpers:high_availability_helpers.py:299 Deploying mysql-test-app
[32mINFO    [0m integration.high_availability.high_availability_helpers:high_availability_helpers.py:302 Relating mysql-k8s with mysql-test-app
[32mINFO    [0m integration.high_availability.test_self_healing:test_self_healing.py:304 Ensuring that there are 3 online mysql members
[32mINFO    [0m integration.high_availability.test_self_healing:test_self_healing.py:309 Ensuring that all instances have incrementing continuous writes
[32mINFO    [0m integration.high_availability.test_self_healing:test_self_healing.py:317 Creating networkchaos policy to isolate instance mysql-k8s/0 from the cluster
[32mINFO    [0m integration.high_availability.test_self_healing:test_self_healing.py:324 Wait until MySQL GR actually detects isolated instance
[32mINFO    [0m integration.high_availability.test_self_healing:test_self_healing.py:341 Ensure all units have incrementing continuous writes
[32mINFO    [0m integration.high_availability.conftest:conftest.py:44 Destroying chaos mesh
[32mINFO    [0m integration.high_availability.conftest:conftest.py:33 Clearing continuous writes